from diagrams import Diagram, Cluster, Edge
from diagrams.gcp.network import CDN, LoadBalancing, DNS, Armor, VPN
from diagrams.gcp.compute import Run
from diagrams.gcp.storage import Storage, Filestore
from diagrams.gcp.database import Firestore, SQL, Memorystore
from diagrams.gcp.operations import Monitoring, Logging
from diagrams.gcp.security import Iam, KMS, SCC
from diagrams.custom import Custom
from diagrams.generic.blank import Blank
from urllib.request import urlretrieve
from diagrams.onprem.client import Client
from diagrams.generic.storage import Storage as genstorage
from diagrams.oci.connectivity import CustomerPremise


# graph_attr
dashed_border = {
    "bgcolor": "transparent",
    "style": "dashed",
    "pencolor": "#999999",
    "fontsize": "15",
}

filled_border = {
    "style": "filled",
    "pencolor": "transparent",
}

project_graph_attr = {
    "style": "filled",
    "pencolor": "transparent",
    "bgcolor": "#EEEEEE",
    "fontsize": "30",
    "fontcolor": "#858585"
}

computing_subnet_graph_attr = {
    "bgcolor": "#DAE8FC",
    "pencolor": "transparent",
    "style": "filled",
}

database_subnet_graph_attr = {
    "bgcolor": "#D5E8D4",
    "pencolor": "transparent",
    "style": "filled",
}

database_subnet_zone_graph_attr = {
    "bgcolor": "#AAE3B9",
    "pencolor": "transparent",
    "style": "filled",
}

# node_attr
size_node = {
    "height": "2",
    "width": "5",
}

# edge_attr
https_label_edge = {
    "color": "#0000CC",
    "label": "https",
}
https_edge = {
    "color": "#0000CC",
}

tls_label_edge = {
    "color": "#9E7D24",
    "label": "Private Service Access / TLS",
}
tls_edge = {
    "color": "#9E7D24",
}

IPsec_label_edge = {
    "color": "#4D9900",
    "label": "IPsec",
}

with Diagram("GCP_allcr_withoutha version"
             , show=False,direction="LR"):
    client1=Client("Client")
    client2=Client("Client")
    
    with Cluster("Cathay-On Premise", graph_attr={**filled_border,"bgcolor": "#EBE6E4", "fontsize": "40",}):
        storage = genstorage("Local_Storage")
        batch_service = CustomerPremise("Batch Service")
        internal_website =CustomerPremise("Internal Website")
    
    with Cluster("Google Cloud Platform", graph_attr={**filled_border, "bgcolor": "#F5F5F5", "fontsize": "40",}):
        with Cluster("Service Project", graph_attr=project_graph_attr):
        
            cdn = CDN("Cloud CDN")
            loadBalancing = LoadBalancing("Cloud Load Balancing")
            dns = DNS("Cloud DNS")
            armor = Armor("Cloud Armor")
            dns >> Edge(**https_edge) >> loadBalancing
            loadBalancing - Edge(style="dashed") - armor

            with Cluster("Computing", graph_attr=dashed_border):
                with Cluster("Subnet", graph_attr=computing_subnet_graph_attr):
                    cloudrun= Run("Cloud Run")

            with Cluster("Storage", graph_attr=dashed_border):
                filestore = Filestore("Filestore")
                cloudStorage = Storage("Cloud Storage")
    
            with Cluster("Databases", graph_attr=dashed_border):
                firestore = Firestore("Firestore")
            with Cluster("Operations", graph_attr=dashed_border):
                trace_url= "https://lh3.googleusercontent.com/OtgF6e6zXgd3ZYkwxuQengezPLH7eFEESd7DdQ5mN3jb_S95Lb87aXUyRhamnVBSnDiCbX4pBUQfCw5zUUJ_=w240-h240"
                trace_icon = "trace.png"
                urlretrieve(trace_url, trace_icon)
                monitoring = Monitoring("Monitoring")
                logging = Logging("Logging")
                trace = Custom("trace", trace_icon)
    
            with Cluster("Security", graph_attr=dashed_border):
                scc = SCC("Cloud Security Command Center")
                kms = KMS("Key Management Service")
                secret_url = "https://jenkins-x.io/images/logo/secret-manager.png"
                secret_icon = "SM.png"
                urlretrieve(secret_url, secret_icon)
                secretMaganer = Custom("Secret Manager", secret_icon)
                iam = Iam("Cloud IAM")

        [client1, client2] >> Edge(**https_label_edge) >> cdn >> Edge(**https_edge) << loadBalancing
        loadBalancing >> Edge(**https_edge) >> cloudrun >> Edge(**https_edge) >> [cloudStorage, firestore]

        with Cluster("Host Project", graph_attr=project_graph_attr):
            with Cluster("Share VPC Network", graph_attr={**filled_border, "bgcolor": "#FFF2CC"}):
                with Cluster("asia-east1", graph_attr={**filled_border, "bgcolor": "#F5F5F5"}):

                    vpn = VPN("Cloud VPN")

                    with Cluster("Subnet1", graph_attr=computing_subnet_graph_attr):
                        blank_blue = Blank("", **size_node)
                        cloudrun - Edge(color="black", style="dashed") - blank_blue

                    vpn >> Edge(**IPsec_label_edge) << batch_service
